// server/src/utils/db.ts
import oracledb from 'oracledb';
import dotenv from 'dotenv';

dotenv.config();

const { DB_USER, DB_PASSWORD, DB_CONNECTION_STRING } = process.env;

if (!DB_USER || !DB_PASSWORD || !DB_CONNECTION_STRING) {
  throw new Error('환경 변수가 설정되지 않았습니다. .env 파일을 확인하세요.');
}

// COMMENTS 테이블 초기화
export const initCommentsTable = async () => {
  let connection;
  try {
    // autoCommit을 false로 설정
    oracledb.autoCommit = false;
    connection = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectionString: DB_CONNECTION_STRING,
    });

    // COMMENTS 테이블 드롭 시도 (없으면 에러 무시)
    try {
      console.log('기존 COMMENTS 테이블을 드롭 시도합니다.');
      await connection.execute(`DROP TABLE COMMENTS CASCADE CONSTRAINTS`);
      await connection.commit();
      console.log('COMMENTS 테이블 드롭 완료');
    } catch (dropError: any) {
      if (dropError.errorNum === 942) {
        // ORA-00942: table or view does not exist - 정상 (테이블이 없음)
        console.log('COMMENTS 테이블이 존재하지 않습니다. 새로 생성합니다.');
      } else {
        // 다른 에러는 throw
        throw dropError;
      }
    }

    // 새로운 COMMENTS 테이블 생성 (HEADER_ID, TAIL_ID를 NULL 허용)
    console.log('새로운 COMMENTS 테이블을 생성합니다.');
    await connection.execute(`
      CREATE TABLE COMMENTS (
        ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        PARENT_HEADER_ID NUMBER,  -- 변경된 필드명
        HASHED_USER_IP VARCHAR2(64) NOT NULL,
        HASHED_PASSWORD VARCHAR2(255) NOT NULL,
        CONTENT CLOB,
        CREATED_AT TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
        UPDATED_AT TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
        IS_EDITED NUMBER(1) DEFAULT 0 NOT NULL,
        IS_DELETED NUMBER(1) DEFAULT 0 NOT NULL,
        VERSION NUMBER(5) DEFAULT 1 NOT NULL,
        EDITED_COMMENT_ID NUMBER,
        HEADER_ID NUMBER,    -- NOT NULL 제거
        TAIL_ID NUMBER,      -- NOT NULL 제거
        CONSTRAINT FK_PARENT_HEADER_COMMENT
          FOREIGN KEY (PARENT_HEADER_ID)
          REFERENCES COMMENTS(ID)
          ON DELETE SET NULL,
        CONSTRAINT FK_EDITED_COMMENT
          FOREIGN KEY (EDITED_COMMENT_ID)
          REFERENCES COMMENTS(ID),
        CONSTRAINT FK_HEADER_COMMENT
          FOREIGN KEY (HEADER_ID)
          REFERENCES COMMENTS(ID),
        CONSTRAINT FK_TAIL_COMMENT
          FOREIGN KEY (TAIL_ID)
          REFERENCES COMMENTS(ID)
      )
    `);
    console.log('새로운 COMMENTS 테이블 생성 완료');

    // 수동 커밋
    await connection.commit();
  } catch (error) {
    if (connection) {
      await connection.rollback();
    }
    console.error('COMMENTS 테이블 초기화 중 오류 발생:', error);
    throw error;
  } finally {
    if (connection) {
      try {
        await connection.close();
      } catch (err) {
        console.error('DB 연결 종료 실패', err);
      }
    }
  }
};

// APPS 테이블 초기화
export const initAppsTable = async () => {
  let connection;
  try {
    oracledb.autoCommit = false;
    connection = await oracledb.getConnection({
      user: DB_USER,
      password: DB_PASSWORD,
      connectionString: DB_CONNECTION_STRING,
    });

    // APPS 테이블 드롭 시도 (없으면 에러 무시)
    try {
      console.log('기존 APPS 테이블을 드롭 시도합니다.');
      await connection.execute(`DROP TABLE APPS CASCADE CONSTRAINTS`);
      await connection.commit();
      console.log('APPS 테이블 드롭 완료');
    } catch (dropError: any) {
      if (dropError.errorNum === 942) {
        // ORA-00942: table or view does not exist - 정상 (테이블이 없음)
        console.log('APPS 테이블이 존재하지 않습니다. 새로 생성합니다.');
      } else {
        // 다른 에러는 throw
        throw dropError;
      }
    }

    // 새로운 APPS 테이블 생성
    console.log('새로운 APPS 테이블을 생성합니다.');
    await connection.execute(`
      CREATE TABLE APPS (
        ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        TITLE VARCHAR2(255) NOT NULL,
        DESCRIPTION VARCHAR2(500),
        IMAGE_URL VARCHAR2(500),
        APK_URL VARCHAR2(500),
        WEB_URL VARCHAR2(500),
        DEMO_URL VARCHAR2(500),
        GITHUB_URL VARCHAR2(500),
        DISPLAY_ORDER NUMBER DEFAULT 0 NOT NULL,
        IS_ACTIVE NUMBER(1) DEFAULT 1 NOT NULL,
        CREATED_AT TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
        UPDATED_AT TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL
      )
    `);
    console.log('새로운 APPS 테이블 생성 완료');

    await connection.commit();
  } catch (error) {
    if (connection) {
      await connection.rollback();
    }
    console.error('APPS 테이블 초기화 중 오류 발생:', error);
    throw error;
  } finally {
    if (connection) {
      try {
        await connection.close();
      } catch (err) {
        console.error('DB 연결 종료 실패', err);
      }
    }
  }
};

export const getConnection = async () => {
  return oracledb.getConnection({
    user: DB_USER,
    password: DB_PASSWORD,
    connectionString: DB_CONNECTION_STRING,
  });
};
